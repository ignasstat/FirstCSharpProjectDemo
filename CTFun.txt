function ClearFileLock([string]$fileID, [string]$fileSource) {
    $sql = "EXECUTE [dbo].[up_CT_ClearFileLock] $fileID, '$fileSource'"
    Execute-SQLCommand $sql
}

function CheckFileExists([int]$lngFileID, [string]$JobNumber) {
    $sql = "SELECT * FROM dbo.vw_ExistingFiles WHERE fileid = $lngFileID"
    $table = Query-SQL $sql

    if ($table.Rows.Count -eq 0) {
        Write-Host "file no longer in view (someone else may have processed it)"
        return "not in view"
    } else {
        $strFile = $table.Rows[0]["Folder"] + $table.Rows[0]["Filename"]
        $HeaderInFirstRow = GetHeaderInFirstRow $JobNumber

        if ($strFile.Contains("\\cig.local\Data\Marketing Solutions Departments\Production\")) {
            return CheckFileExists_Local $strFile, $HeaderInFirstRow
        } else {
            return CheckFileExists_EFT $lngFileID, $JobNumber, $HeaderInFirstRow, $strFile
        }
    }
}

function CheckFileExists_EFT([int]$lngFileID, [string]$JobNumber, [bool]$HeaderInFirstRow, [string]$strFile) {
    # Placeholder for paths and logic to check files
    # Implementation depends on environment specifics and requirements
    # This function should manage file checking logic on EFT
}

function CheckFileExists_Local([string]$myFile, [bool]$HeaderInFirstRow) {
    $fso = New-Object -ComObject Scripting.FileSystemObject

    if (-not $fso.FileExists($myFile)) {
        return "not found"
    } else {
        $mf = $fso.GetFile($myFile)
        
        if ($mf.Size -gt 0) {
            if ($HeaderInFirstRow) {
                if (ContainsMultipleLines $myFile) {
                    return "OK"
                } else {
                    return "Is empty"
                }
            } else {
                return "OK"
            }
        } else {
            return "Is empty"
        }
    }
}

function GetHeaderInFirstRow([string]$JobNumber) {
    $sql = "SELECT HeadersInFirstRow FROM neptunefileimporter.fileimporter.Jobs "
    $sql += "WHERE JobId IN (SELECT Max(JobId) FROM neptunefileimporter.fileimporter.Jobs WHERE DestinationTable = '$JobNumber')"
    $table = Query-SQL $sql

    if ($table.Rows.Count -eq 0) {
        Write-Host "Error retrieving HeadersInFirstRow value from neptunefileimporter.fileimporter.Jobs"
        return $false
    } else {
        return [bool]$table.Rows[0]["HeadersInFirstRow"]
    }
}

function ContainsMultipleLines([string]$FileName) {
    $fso = New-Object -ComObject Scripting.FileSystemObject
    if ($fso.FileExists($FileName)) {
        $mf = $fso.OpenTextFile($FileName, 1, $false)
        $lineCount = 0

        while (-not $mf.AtEndOfStream -and $lineCount -lt 2) {
            $mf.ReadLine()
            $lineCount++
        }

        $mf.Close()
        return $lineCount -gt 1
    } else {
        return $false
    }
}

function DeleteFile([string]$filePath) {
    $fso = New-Object -ComObject Scripting.FileSystemObject

    if ($fso.FileExists($filePath)) {
        try {
            $fso.DeleteFile($filePath)
            Write-Host "File deleted successfully."
        } catch {
            Write-Host "Failed to delete file after multiple attempts."
        }
    }
}

# SQL query and command execution functions need to be implemented as well
function Execute-SQLCommand([string]$sql) {
    # Implementation of SQL command execution
}

function Query-SQL([string]$sql) {
    # Implementation of SQL data querying
}
