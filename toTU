function Setup-Job {
    param (
        [string]$JobRunStatus,
        [string]$JobNumber,
        [int]$RunNumber,
        [string]$FileFolder,
        [string]$FileName,
        [string]$JobClient,
        [string]$RunID
    )

    # Error handling
    trap {
        if ($FileCopied) {
            Write-Host "Error occurred after copying the file to job folder. Contact Technical Operator."
        } else {
            Write-Host "Error occurred before copying the file. Make sure the file exists and try again."
        }
        Write-Host "Error: $($_.Exception.Message)"
        continue
    }

    $connectionString = "Server=your_server;Database=DataBureauDataLoadAudit;Integrated Security=True;"
    $connection = New-Object System.Data.SqlClient.SqlConnection
    $connection.ConnectionString = $connectionString
    $connection.Open()

    $strJobFolder = "$RootJobFolder$JobNumber`_$RunNumber"
    $FileCopied = $false

    if ($JobRunStatus.ToLower() -eq "logged") {
        $LaunchFolder = Get-LaunchFolder -JobNumber $JobNumber

        $sql = "SELECT ISNULL(DeleteSource, 0) as DeleteSource FROM dbo.CT_Jobs WHERE Job_Number='$JobNumber'"
        $command = $connection.CreateCommand()
        $command.CommandText = $sql
        $DeleteSource = $command.ExecuteScalar()

        if ((IsSourceFileLocal -FileFolder $FileFolder)) {
            New-Item -ItemType Directory -Path $strJobFolder -Force
            New-Item -ItemType Directory -Path "$strJobFolder\Original" -Force
            if ($LaunchFolder) {
                New-Item -ItemType Directory -Path "$strJobFolder\Launch" -Force
            }
            New-Item -ItemType Directory -Path "$strJobFolder\Output" -Force
            New-Item -ItemType Directory -Path "$strJobFolder\Reports" -Force
            New-Item -ItemType Directory -Path "$strJobFolder\Sent" -Force
            New-Item -ItemType Directory -Path "$strJobFolder\Old" -Force
            Move-Item -Path "$FileFolder\$FileName" -Destination "$strJobFolder\Original\"
        } else {
            $sql = "SELECT ConfigValue FROM dbo.CT_Config WHERE ConfigItem='DTPPendingFolder'"
            $command.CommandText = $sql
            $SaveLocation = $command.ExecuteScalar()

            $sql = "SELECT ConfigValue FROM dbo.CT_Config WHERE ConfigItem='DTPToLoadFolder'"
            $command.CommandText = $sql
            $DTPToLoad = $command.ExecuteScalar()

            $InterimSubFolder = "$InterimFolder$JobNumber`_$RunNumber"
            if (Test-Path $InterimSubFolder) {
                Remove-Item -Path $InterimSubFolder -Recurse -Force
            }
            New-Item -ItemType Directory -Path $InterimSubFolder -Force

            $GUIDString = [guid]::NewGuid().ToString()
            $nodeStep = 1
            $DecryptionAdded = $false
            $sql = "SELECT PGP_Input FROM dbo.CT_Jobs WHERE Job_Number='$JobNumber'"
            $command.CommandText = $sql
            $PGP_Input = $command.ExecuteScalar()

            if ([string]::IsNullOrEmpty($PGP_Input) -or $PGP_Input -eq "0" -or $PGP_Input -eq "False") {
                $PGP_Input = "0"
            } else {
                $DecryptionAdded = $true
            }

            if ($DecryptionAdded) {
                $PGPTempFolder = "$PGPTemporaryFolder$GUIDString"
                $PGP_Input = ""
                Create-DecryptionNode -GUIDString $GUIDString -ActionListNames ([ref]$ActionListNames) -SaveLocation $SaveLocation -nodeStep ([ref]$nodeStep) -FileName $FileName -FileFolder $FileFolder -PGPTempFolder $PGPTempFolder -PGP_Input $PGP_Input -JobNumber $JobNumber -JobClient $JobClient

                if ($FileName.ToLower().Contains(".pgp")) {
                    $FileName = $FileName.Replace(".pgp", "")
                } elseif ($FileName.ToLower().Contains(".gpg")) {
                    $FileName = $FileName.Replace(".gpg", "")
                }

                Create-CopyNode -GUIDString $GUIDString -ActionListNames ([ref]$ActionListNames) -SaveLocation $SaveLocation -nodeStep ([ref]$nodeStep) -SourceFolder $PGPTempFolder -DestinationFolder $InterimSubFolder -FileName $FileName -JobNumber $JobNumber -JobClient $JobClient

                Create-DeletionNode -GUIDString $GUIDString -ActionListNames ([ref]$ActionListNames) -SaveLocation $SaveLocation -nodeStep ([ref]$nodeStep) -FolderPath $PGPTempFolder -JobNumber $JobNumber -JobClient $JobClient
            } else {
                if ($DeleteSource -eq 1 -or $FileFolder.ToLower().Contains("\production\data in\calltrace\") -or $FileFolder.ToLower().Contains("\neptune\calltrace\intouch\")) {
                    Create-MoveNode -GUIDString $GUIDString -ActionListNames ([ref]$ActionListNames) -SaveLocation $SaveLocation -nodeStep ([ref]$nodeStep) -SourceFolder $FileFolder -DestinationFolder $InterimSubFolder -FileName $FileName -JobNumber $JobNumber -JobClient $JobClient
                } else {
                    Create-CopyNode -GUIDString $GUIDString -ActionListNames ([ref]$ActionListNames) -SaveLocation $SaveLocation -nodeStep ([ref]$nodeStep) -SourceFolder $FileFolder -DestinationFolder $InterimSubFolder -FileName $FileName -JobNumber $JobNumber -JobClient $JobClient
                }
            }

            Create-TriggerNode -GUIDString $GUIDString -ActionListNames ([ref]$ActionListNames) -SaveLocation $SaveLocation -nodeStep ([ref]$nodeStep) -InterimSubFolder $InterimSubFolder -JobNumber $JobNumber -RunNumber $RunNumber

            $FirstActionPath = ($ActionListNames -split ";")[0]
            Move-Item -Path $FirstActionPath -Destination $DTPToLoad

            $StartTime = [System.Diagnostics.Stopwatch]::StartNew()
            $MaxProcessingTime = 120

            while (-not (Test-Path "$InterimSubFolder\$JobNumber`_$RunNumber.trg")) {
                $SecondsElapsed = $StartTime.Elapsed.TotalSeconds

                if (Test-Path "$DTPFailedFolder*$GUIDString*") {
                    Write-Host "Request to copy the file failed. Please contact Technical Operator."
                    return
                }

                if ($SecondsElapsed -gt $MaxProcessingTime) {
                    Write-Host "Request to copy the file from client to Job folder exceeded its time limit - $($MaxProcessingTime / 60) minutes"

                    if ((Read-Host "Extend time limit by another minute? (Y/N)") -eq "Y") {
                        $MaxProcessingTime += 60
                    } else {
                        return
                    }
                }
            }

            $StartTime.Stop()

            New-Item -ItemType Directory -Path $strJobFolder -Force
            New-Item -ItemType Directory -Path "$strJobFolder\Original" -Force
            if ($LaunchFolder) {
                New-Item -ItemType Directory -Path "$strJobFolder\Launch" -Force
            }
            New-Item -ItemType Directory -Path "$strJobFolder\Output" -Force
            New-Item -ItemType Directory -Path "$strJobFolder\Reports" -Force
            New-Item -ItemType Directory -Path "$strJobFolder\Sent" -Force
            New-Item -ItemType Directory -Path "$strJobFolder\Old" -Force

            Move-Item -Path "$InterimSubFolder\$FileName" -Destination "$strJobFolder\Original\"

            Remove-Item -Path $InterimSubFolder -Recurse -Force
        }

        $FileCopied = $true

        if ($FileName.TrimEnd() -ne $FileName.Trim()) {
            Move-Item -Path "$strJobFolder\Original\$($FileName.TrimEnd())" -Destination "$strJobFolder\Original\$($FileName.Trim())"
            $FileName = $FileName.Trim()
        }

        $JobRunStatus = "Pre-Processing"
        Update-RunStatus -strRunID $RunID -strStatus $JobRunStatus -intError 0 -strTTP ""
        Set-Actions -JobRunStatus $JobRunStatus

        Write-Host "Folders Created and Source File Copied"
    }

    $connection.Close()
}






# Function to get LaunchFolder
function Get-LaunchFolder {
    param (
        [string]$JobNumber
    )

    $connectionString = "Server=your_server;Database=DataBureauDataLoadAudit;Integrated Security=True;"
    $query = "SELECT LaunchFolder FROM dbo.CT_Jobs WHERE Job_Number='$JobNumber'"

    $connection = New-Object System.Data.SqlClient.SqlConnection
    $connection.ConnectionString = $connectionString
    $connection.Open()

    $command = $connection.CreateCommand()
    $command.CommandText = $query

    $result = $command.ExecuteScalar()
    $connection.Close()

    if ($null -eq $result) {
        return 0
    } else {
        return [int]$result
    }
}

# Function to trim whitespace from a string
function Trim {
    param (
        [string]$varIn
    )

    if ($null -eq $varIn) {
        return ""
    } else {
        return $varIn.Trim()
    }
}

# Function to update run status
function Update-RunStatus {
    param (
        [string]$strRunID,
        [string]$strStatus,
        [int]$intError,
        [string]$strTTP
    )

    $connectionString = "Server=your_server;Database=DataBureauDataLoadAudit;Integrated Security=True;"
    $connection = New-Object System.Data.SqlClient.SqlConnection
    $connection.ConnectionString = $connectionString
    $connection.Open()

    # Update the run status for the given job
    $updateQuery = "UPDATE dbo.CT_JobRun SET RunStatus = '$strStatus' WHERE CT_RunID = $strRunID"
    $command = $connection.CreateCommand()
    $command.CommandText = $updateQuery
    $command.ExecuteNonQuery()

    # Add an entry to the run status audit log
    if ($strStatus.ToLower() -eq "failed") {
        $insertQuery = @"
INSERT INTO dbo.CT_RunStatusLog (CT_RunID, CT_Status, UserName, UpdateDate, ErrorType, TTP)
SELECT $strRunID, '$strStatus', '$strUserName', GETDATE(), ErrorType, '$strTTP'
FROM dbo.CT_ErrorType
WHERE CT_ErrorID = $(Trim $intError)
"@
    } else {
        $insertQuery = "INSERT INTO dbo.CT_RunStatusLog (CT_RunID, CT_Status, UserName, UpdateDate) VALUES ($strRunID, '$strStatus', '$strUserName', GETDATE())"
    }
    $command.CommandText = $insertQuery
    $command.ExecuteNonQuery()

    # If completed, update the job run with completion date
    if ($strStatus.ToLower() -eq "complete") {
        $completionQuery = "UPDATE dbo.CT_JobRun SET CompletedDate = GETDATE() WHERE CT_RunID = $strRunID"
        $command.CommandText = $completionQuery
        $command.ExecuteNonQuery()
    }

    $connection.Close()
}
