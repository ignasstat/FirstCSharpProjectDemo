# SQL connection details
$server = "xxxx"
$database = "yyyyyyy"
$connectionString = "Server=$server;Database=$database;Integrated Security=True;"

$sqlQuery = @"
SELECT TOP (1000) [FilePresant]
      ,[UpdatedDate]
      ,[Folder]
      ,[FileName]
FROM llll
WHERE UpdatedDate > '2023-01-01'
"@

$sqlConnection = New-Object System.Data.SqlClient.SqlConnection
$sqlConnection.ConnectionString = $connectionString

try {
    $sqlConnection.Open()

    $sqlCommand = $sqlConnection.CreateCommand()
    $sqlCommand.CommandText = $sqlQuery

    $dataAdapter = New-Object System.Data.SqlClient.SqlDataAdapter $sqlCommand

    $dataSet = New-Object System.Data.DataSet

    $dataAdapter.Fill($dataSet) | Out-Null

    # Loop through each row in the dataset and update values in a SQL table
    foreach ($row in $dataSet.Tables[0].Rows) {
        $FileName = $row["FileName"]
        $FolderName = $row["Folder"]
        $filePath = $row["Folder"] + $row["FileName"]
        $fileExists = Test-Path $filePath

        # Determine the value for FilePresant
        $filePresentValue = if ($fileExists) {'Y'} else {'N'}

        $updateTableCommand = "UPDATE CT_TestIgnas SET FilePresant = '$filePresentValue' WHERE FileName = '$FileName'"
        $updateCommand = $sqlConnection.CreateCommand()
        $updateCommand.CommandText = $updateTableCommand

        try {
            # Execute the update command
            $updateCommand.ExecuteNonQuery() | Out-Null
            Write-Host "Update successful for file: $FileName"
        } catch {
            Write-Host "Error updating file: $FileName. Error: $_"
            # Log the error to a transcript file or handle it as needed
        }
    }
} catch {
    Write-Host "Error opening SQL connection. Error: $_"
    # Log the error to a transcript file or handle it as needed
} finally {
    # Close the SQL connection
    $sqlConnection.Close()
    Write-Host "SQL connection closed."
}

# Display the updated data
$dataSet.Tables[0] | Format-Table -AutoSize
