Function JobLaunch(RunID As String, JobType As String, JobNumber As String, RunNumber As Integer, FileName As String) As Boolean


Dim strSQL As String
Dim rst As Recordset
Dim rstL As Recordset
Dim strTarget As String
Dim strSourceFolder As String
Dim strSourceFile As String
Dim strPotentialFiles() As String
Dim intI As Integer
Dim intJobsRunning As Integer
Dim intPriorRuns As Integer
Dim blnProceed As Boolean
Dim LaunchFolder As Integer
Dim MonitorID As Long

ReDim Preserve strPotentialFiles(0)

Set rst = New Recordset
Set rstL = New Recordset

blnProceed = CanLaunchJob(RunID, JobType, JobNumber, RunNumber)

If blnProceed Then
    
    strTarget = AutoLoadFolder & Trim(JobNumber) & "\"
    
    ' Determine if we need a Launch Folder
    LaunchFolder = Get_LaunchFolder(JobNumber)
    
    If LaunchFolder Then
        strSourceFolder = RootJobFolder & Trim(JobNumber) & "_" & Trim(RunNumber) & "\Launch\*.*"
            
        ' can  we identify the file to load
        intI = 0
        strPotentialFiles(intI) = Dir(strSourceFolder)
        If strPotentialFiles(intI) = "" Then
            MsgBox ("Move file to Launch into Launch folder and try again")
            Exit Function
        Else
            ' loop through all files from Launch folder
            Do
                intI = intI + 1
                If intI > UBound(strPotentialFiles) Then
                    ReDim Preserve strPotentialFiles(intI)
                End If
                strPotentialFiles(intI) = Dir
            Loop While Len(strPotentialFiles(intI))
            
            If intI > 1 Then
                MsgBox ("More than one file found in Launch folder, remove other files and try again")
                Exit Function
            Else
                strSourceFolder = RootJobFolder & Trim(JobNumber) & "_" & Trim(RunNumber) & "\Launch\"
                strSourceFile = strPotentialFiles(0)
            End If
        End If
    Else
        strSourceFolder = RootJobFolder & Trim(JobNumber) & "_" & Trim(RunNumber) & "\Original\"
        strSourceFile = FileName
    End If
        
    Set rst = New Recordset
    
    strSQL = "Select  j.JobNo as jobno, j.CustomerID, j.versioninc, j.stateid, s.StepStateID From neptune.dbo.Jis j "
    strSQL = strSQL & "inner join (select max(jisid) jisid from neptune.dbo.Jis where jobno='" & Trim(JobNumber) & "') M "
    strSQL = strSQL & "on j.jisid = M.jisid inner join neptune.dbo.JisStep s on j.jisid=s.jisid where s.stepid = 204"
    
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    
    If rst.EOF Then
        MsgBox ("Run Not Launched, This job number isn't setup for Auto Launch")
        rst.Close
    ElseIf rst("StateID") <> 90 And rst("VersionInc") = 0 Then
        MsgBox ("Run Not Launched, Initial run of this job is not completed and verified")
        rst.Close
    ElseIf rst("StepStateID") <> 20 Then
        MsgBox ("Run Not Launched, Data still being imported for previous run")
        rst.Close
    Else
        rst.Close
    
        ' OK we need to wait check this launch hasn't been attempted but failed previously
        strSQL = " select count(*) GotEntry from neptune.dbo.MonitoredFiles where islocked =1 and username is null and Filename = '" & strSourceFile & "' and "
        strSQL = strSQL & " Folder like '%" & Trim(JobNumber) & "%'"

        rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
        If rst("GotEntry") > 0 Then
            MsgBox ("Run Not Launched, There is already a partial launch for this run, contact Support")
            rst.Close
        Else
            rst.Close
            ' now launch the file
            If Not fso.FolderExists(strTarget) Then
                fso.CreateFolder (strTarget)
            End If
            ' CTC 102 Delete target if already exists
            If fso.FileExists(strTarget & strSourceFile) Then
                fso.DeleteFile strTarget & strSourceFile
                Call Sleep(5)
            End If
                
            fso.CopyFile strSourceFolder & strSourceFile, strTarget, False
               
            ' CTC 114 - New Launch Confirmation Code - Main Logic migrated to SQL
            Call CheckLaunch_AutoLaunch(strTarget, strSourceFile, strUserName, JobNumber, RunNumber, RunID)
            
        
        End If
    End If
End If

JobLaunch = blnProceed

End Function


--------------

Function CanLaunchJob(RunID As String, JobType As String, JobNumber As String, RunNumber As Integer) As Boolean

Dim strSQL As String
Dim rst As Recordset
Dim blnProceed As Boolean
Dim intJobsRunning As Integer
Dim intPriorRuns As Integer

Set rst = New Recordset


' Check if Launch is Enabled or not
strSQL = "exec dbo.up_CT_IsLaunchEnabled"
rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly

If rst.EOF Then
    MsgBox ("Launch Currently Disabled")
    blnProceed = False
Else
    If LCase(rst("ConfigValue")) = "true" Then
        blnProceed = True
    Else
        MsgBox ("Launch Currently Disabled")
        blnProceed = False
    End If
End If
rst.Close

' CTC 098 Additional Check for DPP Jobs
If blnProceed And LCase(JobType) = "dpp" Then
    strSQL = "Exec dbo.up_CT_DPP_LaunchCheck"
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    
    If rst.EOF Then
        MsgBox ("Unable to verify Cobra Environment Status for DPP jobs")
        blnProceed = False
    Else
        If rst("Enabled") Then
            blnProceed = True
        Else
            MsgBox ("DPP Launch on " & rst("Environment") & " Currently Disabled")
            blnProceed = False
        End If
    End If
    rst.Close
End If

If blnProceed Then
    ' check if any running jobs have completed
    Call CheckNeptuneStatus
    
    ' check how many jobs are actually currently running
    strSQL = "select Count(*) as JobsRunning from dbo.CT_JobRun where RunStatus = 'Running'"
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    intJobsRunning = rst("JobsRunning")
    rst.Close
    
    If intJobsRunning < 10 Then ' #CTC032
        blnProceed = True
    ElseIf MsgBox("There are already " & Trim(str(intJobsRunning)) & " running, Do you wish to Launch This job?", vbYesNo) = vbYes Then
        blnProceed = True
    Else
        blnProceed = False
    End If
End If

If blnProceed Then
    
    ' #CTC013
    strSQL = "Exec dbo.up_CT_PreviousRunCheck '" & JobNumber & "', " & RunNumber
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    intPriorRuns = rst("PriorRuns")
    rst.Close
    
    
    If intPriorRuns = 0 Then
        blnProceed = True
    'CTC120 - updated to prevent launching multiple jobs while previous run hasn't reached one of statuses like Neptune Complete, In QC, Verified
    Else: MsgBox (Trim(str(intPriorRuns)) & " previous run(s) for this job has not finished processing, for now you cannot launch this job")
        blnProceed = False
    End If
End If

If blnProceed Then
    ' first run of a job is processed through neptune, so just update the status
    If Val(RunNumber) = 0 Then
        Call UpdateRunStatus(RunID, "Running", 0, "")
        Call SetActions("Running")
        blnProceed = False
    End If
End If

CanLaunchJob = blnProceed

End Function


Sub CheckNeptuneStatus()
    ' check the Neptune status for jobs which are currently running

'    On Error GoTo CheckNeptuneStatus_Error

    Dim strSQL As String
    Dim intP As Integer
    Dim strJobNumber As String
    Dim strRunNumber As String
    Dim intI As Integer
    Dim intCount As Integer
    Dim rst As Recordset
    Dim rst2 As Recordset
    Dim NeptuneVolume As Integer
    Dim RunID As Integer
    Dim NewState As String
    Dim OldState As String
            
    Set rst = New Recordset
        
    strSQL = "select * from dbo.vw_CT_JobRunStatus"
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    
    While Not rst.EOF
        
        NewState = strAssign(rst("NewState"))
        OldState = strAssign(rst("OldState"))
        
        ' update the new job status if is has changed
        If NewState <> OldState And NewState <> "" Then
            
            ' if job has completed through Neptune and volume > 100,000 then deselect the check box for checking
            ' file volumes
            If NewState = "Neptune Complete" Then
                
                ' first get volume from Neptune to record against the job
                strSQL = "update R set R.volume = replace(V.Volume,'*','') from dbo.ct_jobrun R inner join dbo.vw_CallTraceCurrentJobsV4 V on R.CT_RunID = V.RunID where V.Volume <> '?' and R.volume is null"
                db.Execute strSQL
                                
            End If
        
            Call UpdateRunStatus(rst("RunID"), NewState, 0, "")
        End If
        
        rst.MoveNext
    Wend
    rst.Close
    
    ' check jobs where TeleAppend is null
    strSQL = "select JobNo, RunNo from dbo.vw_CallTraceCurrentJobsV4 where isnull(teleappend,'?') = '?'"
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    
    While Not rst.EOF
        ' update the teleappend flag
        strJobNumber = strAssign(rst("JobNo"))
        strRunNumber = strAssign(rst("RunNo"))
        
        strSQL = "exec dbo.up_CT_FlagTeleAppend '" & strJobNumber & "','" & strRunNumber & "'"
        db.Execute (strSQL)
        
        rst.MoveNext
    Wend
    
End Sub

Function Get_LaunchFolder(JobNumber As String) As Integer

    Dim strSQL As String
    Dim rst As Recordset
    Dim LaunchFolder As Integer

    strSQL = "SELECT LaunchFolder FROM DataBureauDataLoadAudit.dbo.CT_Jobs where Job_Number='" & JobNumber & "'"
    
    Set rst = New Recordset
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    If rst.EOF Then
        LaunchFolder = 0
    Else
        LaunchFolder = rst("LaunchFolder")
    End If
    rst.Close

    Get_LaunchFolder = LaunchFolder

End Function

Sub CheckLaunch_AutoLaunch(strTarget As String, strSourceFile As String, strUserName As String, JobNumber As String, RunNumber As Integer, RunID As String)
' CTC 114 - New Launch Confirmation Code - Main Logic migrated to SQL

Dim rstCL As Recordset
Set rstCL = New Recordset
Dim SQL As String
Dim MonitorID As Long

' first get the LaunchID from the Neptune.dbo.MonitoredFiles table - 0 means it Timed out
SQL = "exec [dbo].[up_CT_GetLaunchID] '" & JobNumber & "', '" & strSourceFile & "'"
Set rstCL = db.Execute(SQL)
MonitorID = rstCL("MonitorID")
rstCL.Close

If MonitorID > 0 Then
    
    ' if Successful we need to add the Username to the entry and set the IsLocked Flag
    SQL = "exec [dbo].[up_CT_ConfirmLaunch] '" & JobNumber & "','" & RunNumber & "'," & CStr(MonitorID) & ",'" & strUserName & "'"
    db.Execute (SQL)
    
    MsgBox ("Launch Succeeded")
    Call UpdateRunStatus(RunID, "Running", 0, "")
    Call SetActions("Running")
    
    Call Close_DetailsPage_AutoLaunch(RunID)
Else
    fso.DeleteFile strTarget & strSourceFile
    MsgBox ("Launch Failed, Check File Watcher is Active")
End If

End Sub
