Private Sub SetupJob(JobRunStatus as String, JobNumber as String, RunNumber as Integer, FileFolder as String, FileName as String, JobClient as String, RunID as Integer)
' OK this button is to set the job up by creating the folder structure and copying the source file
'CTC 077 Copy(Move) files from client location to job location using DTP
'TOT 217 Create seperate DTP action xmls instead of Process XML

On Local Error GoTo cmdSetupJob_Error

Dim strRootFolder As String
Dim strJobFolder As String
Dim LaunchFolder As Integer
Dim SQL As String
Dim rst As Recordset

Dim nodeStep As Integer
Dim InterimSubFolder As String
Dim GUIDString As String
Dim PGP_Input As String
Dim PGPTempFolder As String
Dim DecryptionAdded As Boolean
Dim DTPProcessing As String
Dim FileName As String

Dim FileCopied As Boolean
Dim MaxProcessingTime As Integer
Dim StartTime As Double
Dim SecondsElapsed As Double

Dim SaveLocation As String
Dim DTPToLoad As String
Dim ActionListNames As String
Dim FirstActionPath As String

Dim DeleteSource As Integer
Dim sqlDeleteSrc As String

FileCopied = False 

If LCase(JobRunStatus) = "logged" Then
    
    ' Determine if we need a Launch Folder
    LaunchFolder = Get_LaunchFolder(JobNumber)
    
    SQL = "SELECT LaunchFolder FROM DataBureauDataLoadAudit.dbo.CT_Jobs where Job_Number='" & JobNumber & "'"

    Set rst = New Recordset
    rst.Open SQL, db, adOpenForwardOnly, adLockReadOnly
    If rst.EOF Then
        LaunchFolder = 0
    Else
        LaunchFolder = rst("LaunchFolder")
    End If
    rst.Close
    
    'EFT 734 - Specific Jobs when source files should always be moved
 
    sqlDeleteSrc = "SELECT ISNULL(DeleteSource, 0) as DeleteSource FROM DataBureauDataLoadAudit.dbo.CT_Jobs where Job_Number='" & JobNumber & "'"
    rst.Open sqlDeleteSrc, db, adOpenForwardOnly, adLockReadOnly
    DeleteSource = rst("DeleteSource")
    rst.Close

    'Set the job folder name
    strJobFolder = RootJobFolder & JobNumber & "_" & RunNumber
    
    ' CTC 089 - Different method of determining whether the file is local or DTP copy is required
    If IsSourceFileLocal(FileFolder) Then
        'Create the job folder and it's subfolders
        fso.CreateFolder (strJobFolder)
        fso.CreateFolder (strJobFolder & "\Original")
        If LaunchFolder Then
            fso.CreateFolder (strJobFolder & "\Launch")
        End If
        fso.CreateFolder (strJobFolder & "\Output")
        fso.CreateFolder (strJobFolder & "\Reports")
        fso.CreateFolder (strJobFolder & "\Sent")
        fso.CreateFolder (strJobFolder & "\Old")
        fso.MoveFile FileFolder & FileName, strJobFolder & "\Original\"
    Else
        'Needs copying from EFT using Data Transfer Process
        'Debug.Print Now(); " Time when Setup Button was clicked"
        
        'Get the location for saving the DTP XML files
        SQL = "select ConfigValue from CT_Config where ConfigItem = 'DTPPendingFolder'"
        rst.Open SQL, db, adOpenForwardOnly, adLockReadOnly
        SaveLocation = rst("ConfigValue")
        rst.Close
        
        'Get the location for moving the DTP XML action ToLoad folder
        SQL = "select ConfigValue from CT_Config where ConfigItem = 'DTPToLoadFolder'"
        rst.Open SQL, db, adOpenForwardOnly, adLockReadOnly
        DTPToLoad = rst("ConfigValue")
        rst.Close

        InterimSubFolder = InterimFolder & JobNumber & "_" & RunNumber
        'Create subfolder in interim location
        If fso.FolderExists(InterimSubFolder) Then
           fso.DeleteFolder (InterimSubFolder)
        End If
        fso.CreateFolder (InterimSubFolder)
        
        'Generate GUID string for DTP XML
        GUIDString = GUID.CreateGuidString
        
        'Iterating DTP action step sequence from 1
        nodeStep = 1
        
        'Check if decryption is required
        DecryptionAdded = False
        SQL = "select PGP_Input from ct_jobs where Job_Number = '" & JobNumber & "'"
        Set rst = New Recordset
        rst.Open SQL, db, adOpenForwardOnly, adLockReadOnly
        If Not rst.EOF Then
          If IsNull(rst("PGP_Input")) Then
              PGP_Input = "0"
          ElseIf rst("PGP_Input") = "False" Then
              PGP_Input = "0"
          ElseIf rst("PGP_Input") = "" Then
              PGP_Input = "0"
          ElseIf rst("PGP_Input") = "0" Then
              PGP_Input = "0"
          Else
              PGP_Input = rst("PGP_Input")
              DecryptionAdded = True
          End If
        End If
        rst.Close
                
        'Debug.Print Now(); " Collected info for DTP request"
                
        'Create decryption node in DTP Request file
        If DecryptionAdded Then
           'Set temp folder for PGP decryption
           PGPTempFolder = PGPTemporaryFolder & GUIDString
           'Currently as the decryption key is same for all the PGP inbound files we need to set decryption key to empty value for Auto decryption folder
           PGP_Input = ""
           Call DTPXML.CreateDecryptionNode(GUIDString, ActionListNames, SaveLocation, nodeStep, FileName, FileFolder, PGPTempFolder, PGP_Input, JobNumber, JobClient)
           
           'The filename will no longer have .pgp extension, so need to remove that
           If InStr(LCase(FileName), ".pgp") > 0 Then FileName = Replace(FileName, ".pgp", "")
            'Or it may have .gpg extension
           If InStr(LCase(FileName), ".gpg") > 0 Then FileName = Replace(FileName, ".gpg", "")
           
           'Copy the file from temporary PGP location to the interim folder
           Call DTPXML.CreateCopyNode(GUIDString, ActionListNames, SaveLocation, nodeStep, PGPTempFolder, InterimSubFolder, FileName, JobNumber, JobClient)
           
           'After the file has been copied, we can delete the temporary PGP location
           Call DTPXML.CreateDeletionNode(GUIDString, ActionListNames, SaveLocation, nodeStep, PGPTempFolder, JobNumber, JobClient)
           
        Else
        'Create DTP request node to copy(move) files from input location to interim location
        'EFT 734 - Specific Jobs when source files should always be moved
            If DeleteSource = 1 Then
                Call DTPXML.CreateMoveNode(GUIDString, ActionListNames, SaveLocation, nodeStep, FileFolder, InterimSubFolder, FileName, JobNumber, JobClient)
            ElseIf InStr(LCase(FileFolder), "\production\data in\calltrace\") > 0 Or InStr(LCase(FileFolder), "\Neptune\CallTrace\InTouch\") > 0 Then
                Call DTPXML.CreateMoveNode(GUIDString, ActionListNames, SaveLocation, nodeStep, FileFolder, InterimSubFolder, FileName, JobNumber, JobClient)
            Else
                Call DTPXML.CreateCopyNode(GUIDString, ActionListNames, SaveLocation, nodeStep, FileFolder, InterimSubFolder, FileName, JobNumber, JobClient)
            End If
        End If

        'Create DTP request to create a trigger file when file copy has been complete using "BespokeCommand" with "out-file", inside the interimSubFolder
        Call DTPXML.CreateTriggerNode(GUIDString, ActionListNames, SaveLocation, nodeStep, InterimSubFolder, JobNumber, RunNumber)
        
        'Move the first action into the ToLoad folder
        FirstActionPath = Split(ActionListNames, ";")(0)
        fso.MoveFile FirstActionPath, DTPToLoad

        'Debug.Print Now(); " Created DTP action xmls"
        
        'Start the timer to check how long DTP process has been running
        StartTime = Timer
        MaxProcessingTime = 120
        
        'Loop until completed transfer trigger file is found - meaning the end of the copy
        While Not fso.FileExists(InterimSubFolder & "\" & JobNumber & "_" & RunNumber & ".trg")
            'Check the elapsed time
            SecondsElapsed = Round(Timer - StartTime, 2)
            
            'Check if any actions triggers were moved to the failed folder
            'Beggining and ending of action trigger names can differ, so need a wildcard to check if it exists
            If (Dir(DTPFailedFolder + "*" & GUIDString & "*") <> vbNullString) Then
                MsgBox "Request to copy the file failed" & vbCrLf & "Please contact Technical Operator."
                Exit Sub
            End If
            
           'It shouldn't take longer than 2 minutes, if it does it probably means DTP process failed to copy the file
            If SecondsElapsed > MaxProcessingTime Then
                MsgBox ("Request to copy the file from client to Job folder exceeded it's time limit - " & (MaxProcessingTime / 60) & " minutes")
                
                'Allow users to extend the time of the copy if time limit is exceeded
                If (MsgBox("Extend time limit by another minute?", vbYesNo) = vbYes) Then
                    MaxProcessingTime = MaxProcessingTime + 60
                Else
                    Exit Sub
                End If
            End If
            
        Wend
        ' Debug.Print Now(); " Detected trigger created by DTP"
        
        'Create required job folders
        fso.CreateFolder (strJobFolder)
        fso.CreateFolder (strJobFolder & "\Original")
        If LaunchFolder Then
            fso.CreateFolder (strJobFolder & "\Launch")
        End If
        fso.CreateFolder (strJobFolder & "\Output")
        fso.CreateFolder (strJobFolder & "\Reports")
        fso.CreateFolder (strJobFolder & "\Sent")
        fso.CreateFolder (strJobFolder & "\Old")
        
        'Third timer
        ' Debug.Print Now(); " Created job folders"
        
        'Move file from interim location to Job folder using CTC
        fso.MoveFile InterimSubFolder & "\" & FileName, strJobFolder & "\Original\"
        
        ' Debug.Print Now(); " Moved the file from interim to job folder"
    
        'Delete the interim subfolder along the completed transfer trigger
        fso.DeleteFolder (InterimSubFolder)
        ' Debug.Print Now(); " Deleted the interim folder"
    End If
    
    FileCopied = True
    
    ' check if we have a file with a leading space in the name as this can cause errors. If RTrim(lblJDFileName.Caption) <> Trim(lblJDFileName.Caption) Then
    If FileName <> FileName Then
        ' no leading spaces
        fso.MoveFile strJobFolder & "\Original\" & FileName, strJobFolder & "\Original\" & FileName
        FileName = FileName
    End If
    ' Debug.Print Now(); " Checked and/or removed leading spaces"
        
    JobRunStatus = "Pre-Processing"
    
    Call UpdateRunStatus(RunID, JobRunStatus, 0, "")
    ' Debug.Print Now(); " Updated run status"
        
    Call SetActions(JobRunStatus)
    ' Debug.Print Now(); " Console actions set"
    MsgBox ("Folders Created and Source File Copied")

End If

Exit Sub


cmdSetupJob_Error:
    If FileCopied Then
        MsgBox "Error occured before copying the file, make sure the file exists and try again."
        Exit Sub
    Else
        MsgBox "Error occured after copying the file to job folder. Contact Technical Operator."
        Exit Sub
    End If


End Sub







---------------------------



Private Sub cmdProcess_Click()

' routine to link a file to a CallTrace job
Call LinkFile

End Sub



Sub LinkFile()

' first need to check the file details are still valid

Dim strFileName As String
Dim strFolder As String
Dim blnProcess As Boolean
Dim strSQL As String
Dim rst As Recordset
Dim rstJ As Recordset
Set rst = New Recordset
Set rstJ = New Recordset

If Not IsNull(lstFileView.Value) Then

    lngFileID = lstFileView.Value
    blnProcess = True
        
    ' Check if the file has been processed or selected by another user
    strSQL = "select * from dbo.vw_CT_CheckFile where fileid = " & LTrim(str(lngFileID))
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    
    If Not rst.EOF Then
        If Not IsNull(rst("FileUser")) Then
            If LCase(Trim(rst("FileUser"))) = LCase(Trim(strUserName)) Then
                ' current user so OK
            Else
                Call MsgBox("File already in use by " & Trim(rst("FileUser")), vbOKOnly)
                blnProcess = False
            End If
        Else
            ' lock file so nobody else can use it
            strSQL = "insert into  dbo.CT_FileLock (FileID, Source, FileUser, dts) values ("
            strSQL = strSQL & rst("FileID") & ","
            strSQL = strSQL & "'" & rst("Source") & "',"
            strSQL = strSQL & "'" & strUserName & "',"
            strSQL = strSQL & "getdate())"
            db.Execute (strSQL)
        End If
    Else
        blnProcess = False
        
        MsgBox ("File no longer available to process, Reject it and Refresh Data")
        
        lstFileView.Requery
        lstRejected.Requery
    End If
    
    'CTC 039 - Cannot check if file exists directly anymore as user won't have permission to EFT folder, added method CheckFileExists
    If blnProcess Then
        ' need to check if file has changed since last update of the list.
        'If SFTP
        If rst("Source") = "E" Then
            If Not CheckFileExists(lngFileID) Then
                MsgBox ("This file or version of it no longer exists on EFT, Reject it and Refresh Data")
                Call ClearFileLock(rst("FileID"), "E")
                blnProcess = False
            End If
        'If Data In
        Else
            If Not CheckFileDetails(lngFileID) Then
                MsgBox ("This file or version of it no longer exists in Data In, Reject it and Refresh Data")
                Call ClearFileLock(rst("FileID"), "I")
                blnProcess = False
            End If
        End If
    End If
    
    If blnProcess Then
    
        ' clear list
        lstJobs.Value = Null
        While lstJobs.ListCount > 0
            lstJobs.RemoveItem (0)
        Wend

        '<'''''''''''''''''''To remove''''''''''''''''''''''''
        ' switch to the Link Page
        pgLink.Visible = True
        pgLink.Enabled = True
        pgLink.SetFocus
        ''''''''''''''''''''To remove''''''''''''''''''''''''>
        pgFileList.Enabled = False
                
        ' Display the file details
        lblFileID.Caption = rst("FileID")
        If rst("Source") = "E" Then
            lblSource.Caption = "SFTP"
        Else
            lblSource.Caption = "Data In"
        End If
        lblFolder.Caption = rst("Folder")
        lblFileName.Caption = rst("FileName")
        lblCreatedDate.Caption = rst("CreatedDate")
        lblUpdatedDate.Caption = rst("UpdatedDate")
        lblSuppliedDate.Caption = rst("SuppliedDate")
        lblSize.Caption = rst("FileSize")
        
        ' identify potential Job Number's for this file
        strSQL = "select * from dbo.vw_CallTraceJobList where inboundfolder = '" & Trim(lblFolder.Caption) & "' and '" & Trim(lblFileName.Caption) & "' like InboundFileSpec"
        rstJ.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
        
        ' Add header
        lstJobs.AddItem ("Job Number;Client Name;Folder;File Spec;Notes;Last Run;Last Neptune Run")
        While Not rstJ.EOF
            strSQL = rstJ("Job_Number") & ";" & rstJ("ClientName") & ";" & rstJ("InboundFolder") & ";" & rstJ("InboundFileSpec") & ";" & rstJ("JobNotes") & ";" & rstJ("LastRun") & ";" & rstJ("LastNeptuneRun")
            lstJobs.AddItem (strSQL)
            rstJ.MoveNext
        Wend
        rstJ.Close
            
    End If
    
    rst.Close
    
End If

End Sub



-------------------------------------------------------------


Sub Progressjob(intRunID As Long)

Dim strSQL As String
Dim OutputFolder As String
Dim PGP_Input As String
Dim rst As Recordset
Set rst = New Recordset


    strSQL = "select * from dbo.vw_CallTrace_JobDetail where runid = " & Trim(str(intRunID))
    rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
    
    If rst.EOF Then
        MsgBox ("Can't retrieve job details")
    ElseIf rst("CurrentUser") <> "" And rst("CurrentUser") <> strUserName Then
        MsgBox (rst("CurrentUser") & " has this job open")
    Else
        ' update job to say it's in use
        strSQL = "update dbo.ct_jobrun set currentuser = '" & strUserName & "' where ct_runid = " & Trim(str(intRunID))
        db.Execute strSQL
       
        pgJobDetail.Visible = True
        pgJobDetail.Enabled = True
        pgJobDetail.SetFocus
        pgJobList.Enabled = False
        ' #CTC018
        pgFileList.Enabled = False
        pgRejected.Enabled = False
        pgLink.Enabled = False
        pgReports.Enabled = False
        pgeManagement.Enabled = False
        
        lblJDRunID.Caption = rst("RunID")
        lblJDJobType.Caption = rst("JobType")
        lblJDClient.Caption = rst("Client")
        lblJDJobNo.Caption = rst("JobNo")
        lblJDRunNo.Caption = rst("RunNo")
        lblJDRunCreatedBy.Caption = rst("CreatedBy")
        lblJDRunCreatedDate.Caption = rst("JobCreatedDate")
        lblJDRunDueDate.Caption = rst("DueDate")
        lblJDRunStatus.Caption = rst("Status")
        lblJDFileSource.Caption = rst("FileSource")
        lblJDFileFolder.Caption = rst("folder")
        lblJDFileName.Caption = rst("FileName")
        lblJDFileSize.Caption = rst("FileSize")
        lblJDFileCreatedDate.Caption = rst("FileCreatedDate")
        lblJDFileUpdatedDate.Caption = rst("FileUpdatedDate")
        lblJDFileSuppliedDate.Caption = rst("FileSuppliedDate")
        lblJDNotes.Caption = strAssign(rst("JobNotes"))
    
        'CTC 120

        Dim JobRunStatus as String 
        Dim JobNumber as String
        Dim RunNumber as Integer
        Dim FileFolder as String
        Dim FileName as String
        Dim JobClient as String

        JobRunStatus = lblJDRunStatus.Caption
        JobNumber = lblJDJobNo.Caption
        RunNumber = lblJDRunNo.Caption
        FileFolder = lblJDFileFolder.Caption
        FileName = lblJDFileName.Caption
        JobClient = lblJDClient.Caption
        




        If IsNull(rst("Volume")) Then
            chkAutoCheckFiles.Value = True
        ElseIf Replace(rst("Volume"), "*", "") > 2000000 Then
            chkAutoCheckFiles.Value = False
        Else
            chkAutoCheckFiles.Value = True
        End If
        
        rst.Close
        
        
        'CTC 077 need to rename from .pgp to ""
        strSQL = "select PGP_Input from CT_Jobs where Job_Number = " & "'" & Trim(lblJDJobNo.Caption) & "'"
        rst.Open strSQL, db, adOpenForwardOnly, adLockReadOnly
        If Not rst.EOF Then
          If IsNull(rst("PGP_Input")) Then
              PGP_Input = "0"
          ElseIf rst("PGP_Input") = "False" Then
              PGP_Input = "0"
          ElseIf rst("PGP_Input") = "" Then
              PGP_Input = "0"
          ElseIf rst("PGP_Input") = "0" Then
              PGP_Input = "0"
          Else
              PGP_Input = rst("PGP_Input")
          End If
        End If
        rst.Close
        
        'Need to check if file was decrypted or not
        'If jobFolder is created and if it uses PGP_Input column set to Auto, that means it was decrypted
        OutputFolder = RootJobFolder & Trim(lblJDJobNo.Caption) & "_" & Trim(lblJDRunNo.Caption) & "\"
        
        If fso.FolderExists(OutputFolder) And PGP_Input = "Auto" Then
            'The filename will no longer have .pgp extension, so need to remove that
            If InStr(LCase(lblJDFileName.Caption), ".pgp") > 0 Then lblJDFileName.Caption = Trim(Replace(lblJDFileName.Caption, ".pgp", ""))
                'Or it may have .gpg extension
            If InStr(LCase(lblJDFileName.Caption), ".gpg") > 0 Then lblJDFileName.Caption = Trim(Replace(lblJDFileName.Caption, ".gpg", ""))
        End If
        
        
        
        Call PopulateRunDetailList
        
        Call SetActions(lblJDRunStatus.Caption)
        
    End If

' CTC 120 

    Call SetupJob (JobRunStatus, JobNumber, RunNumber, FileFolder, FileName, JobClient)
    Private Sub SetupJob(JobRunStatus as String, JobNumber as String, RunNumber as Integer, FileFolder as String, FileName as String, JobClient as String)


End Sub

-------------------------------------------------------------

Private Sub cmdLinkJob_Click()

Dim strSQL As String
Dim rst As Recordset
Dim dtCreated As Date
Dim dtUpdated As Date
Dim strDate As String
Dim strFileSource As String

Set rst = New Recordset

' firstly has the user selected a job from the list?  If not then ignore this button press
If IsNull(lstJobs.Value) Then
    Exit Sub
End If

' identify due by date
dtCreated = lblCreatedDate.Caption
dtUpdated = lblUpdatedDate.Caption

If dtCreated > dtUpdated Then
    strDate = Format(dtCreated, "dd mmm yyyy HH:MM")
Else
    strDate = Format(dtUpdated, "dd mmm yyyy HH:MM")
End If

If lblSource.Caption = "SFTP" Then
    strFileSource = "E"
Else
    strFileSource = "I"
End If

' create an entry in the Job Run Table
strSQL = "insert into dbo.CT_JobRun (CT_JobID,fileid,FileSource,RunNo,CreatedBy,createddate,RunStatus, DueByDate) "
strSQL = strSQL & "Select ct_JobID, "
strSQL = strSQL & Trim(str(lngFileID)) & ","
strSQL = strSQL & "'" & strFileSource & "',"
strSQL = strSQL & "case when LastRun > LastNeptuneRun then LastRun+1 else LastNeptuneRun+1 end, "
strSQL = strSQL & "'" & strUserName & "',"
strSQL = strSQL & "getdate(),"
strSQL = strSQL & "'Logged',"
strSQL = strSQL & "dbo.fn_CallTraceDueDate_New('" & strDate & "', j.job_number ) "
strSQL = strSQL & "from dbo.vw_CallTraceJobList v "
strSQL = strSQL & "inner join dbo.ct_jobs j on v.job_number = j.job_number "
strSQL = strSQL & "where v.job_number = '" & Trim(lstJobs.Value) & "'"

MsgBox ("Linking " & Trim(lstJobs.Value))

db.Execute (strSQL)

' remove the lock on the file
Call ClearFileLock(Trim(str(lngFileID)), strFileSource)

lstActiveJobs.Requery
lstFileView.Requery

pgFileList.Enabled = True
pgJobList.Enabled = True
pgJobList.SetFocus
pgLink.Visible = False
pgLink.Enabled = False

End Sub
